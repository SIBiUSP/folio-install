apiVersion: apps/v1beta2
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "9"
    field.cattle.io/creatorId: u-foo
    field.cattle.io/publicEndpoints: '[{"addresses":["XX.XX.XXX.XXX"],"port":30029,"protocol":"TCP","serviceName":"folio-q4:mod-circulation-nodeport","allNodes":true}]'
  creationTimestamp: null
  generation: 1
  labels:
    cattle.io/creator: norman
    workload.user.cattle.io/workloadselector: deployment-folio-q4-mod-circulation
  name: mod-circulation
  selfLink: /apis/apps/v1beta2/namespaces/folio-q4/deployments/mod-circulation
spec:
  minReadySeconds: 30
  progressDeadlineSeconds: 300
  replicas: 2
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      workload.user.cattle.io/workloadselector: deployment-folio-q4-mod-circulation
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cattle.io/timestamp:
        field.cattle.io/ports: '[[{"containerPort":9801,"dnsName":"mod-circulation-nodeport","kind":"NodePort","name":"9801tcp01","protocol":"TCP","sourcePort":0}]]'
        workload.cattle.io/state: '{"foo==":"c-f00:m-foo"}'
      creationTimestamp: null
      labels:
        workload: folio_module
        workload.user.cattle.io/workloadselector: deployment-folio-q4-mod-circulation
    spec:
      containers:
      - env:
        - name: JAVA_OPTIONS
          value: -Xmx256m
        image: folioorg/mod-circulation:14.1.0
        imagePullPolicy: Always
        name: mod-circulation
        ports:
        - containerPort: 9801
          name: 9801tcp01
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
      dnsPolicy: ClusterFirst
      imagePullSecrets:
      - name: dockerhub
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
